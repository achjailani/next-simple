import { NextPage } from 'next';
import { useState } from 'react';
import { 
  Alert,
  Button, 
  Checkbox, 
  Form, 
  Input,
  Row,
  Divider,
  Badge
} from 'antd';
import type { CheckboxChangeEvent } from 'antd/es/checkbox';

import Head from 'next/head';
import styles from '../../styles/Home.module.css'
import ui from '../../styles/ui.module.css'
import { ConvertResponse } from '../../types/convert'

const NanoConverter: NextPage = () => {
  const [validation, setValidation] = useState({ status: true, message: ''})
  const [selectedFile, setSelectedFile] = useState(null)
  const [form] = Form.useForm()
  const [data, setData] = useState<ConvertResponse | null>(null);
  const [checked, setChecked] = useState(false);

  const onFileChange = (event: any) => {
    setSelectedFile(event.target.files[0])
  }

  const onChacked = (event: CheckboxChangeEvent) => {
    setChecked(event.target.checked);
  }

  const handleSubmit = async (e: any) => {
    setData(null)

    if (isNaN(Number(e.page))) {
      setValidation({ status: false, message: 'Lower Left Y is invalid' })

      return
    }

    if (isNaN(Number(e.lly))) {
      setValidation({ status: false, message: 'Lower Left Y is invalid' })

      return
    }

    if (isNaN(Number(e.llx))) {
      setValidation({ status: false, message: 'Lower Left X is invalid' })

      return
    }

    if (isNaN(Number(e.ury))) {
      setValidation({ status: false, message: 'Upper Right Y Invalid Value' })

      return
    }

    if (isNaN(Number(e.urx))) {
      setValidation({ status: false, message: 'Upper Right X Invalid Value' })

      return
    }

    if (selectedFile == null) {
      setValidation({ status: false, message: 'Ivalid file.' })

      return
    }
    
    const formData = new FormData();
    formData.append("lly", e.lly)
    formData.append("llx", e.llx)
    formData.append("ury", e.ury)
    formData.append("urx", e.urx)
    formData.append("top", String(checked))
    formData.append("file", selectedFile)
    formData.append("page", e.page)

    const response: any = await fetch('/api/file-parser', {
      method: 'POST',
      body: formData
    })
  
    if (!response.ok) {
      const error = await response.json()
      setValidation({ status: false, message: error.error })

      return
    }

    const result: ConvertResponse = await response.json();
    setData(result)
    console.log(result) 
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Pdf Viewer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        { validation?.status == false ? <Row><Alert message={validation?.message} type="error" showIcon /> </Row>: <></> }

        <>
          <Form
            className={ui.m_top}
            form={form}
            name="basic"
            labelCol={{ span: 8 }}
            wrapperCol={{ span: 20 }}
            initialValues={{ from_top: false, page: 1 }}
            autoComplete="off"
            onFinish={handleSubmit}
          >
            <Form.Item
              label="File"
              name="file"
              rules={[{ required: true, message: 'Please input file!' }]}
            >
              <Input type="file" onChange={onFileChange} />
            </Form.Item>

            <Form.Item
              label="Page"
              name="page"
              rules={[{ required: true, message: 'Please input your page!' }]}
            >
              <Input />
            </Form.Item>

            <Form.Item
              label="Lower Left Y"
              name="lly"
              rules={[{ required: true, message: 'Please input lower left y!' }]}
            >
              <Input />
            </Form.Item>

            <Form.Item
              label="Lower Left X"
              name="llx"
              rules={[{ required: true, message: 'Please input lower left x!' }]}
            >
              <Input />
            </Form.Item>

            <Form.Item
              label="Uppper Right Y"
              name="ury"
              rules={[{ required: true, message: 'Please input upper right y!' }]}
            >
              <Input />
            </Form.Item>

            <Form.Item
              label="Upper Right X"
              name="urx"
              rules={[{ required: true, message: 'Please input upper right x!' }]}
            >
              <Input />
            </Form.Item>

            <Form.Item name="from_top" valuePropName="checked" wrapperCol={{ offset: 8, span: 16 }}>
              <Checkbox onChange={onChacked}>Start from Top (y)</Checkbox>
            </Form.Item>

            <Form.Item wrapperCol={{ offset: 8, span: 16 }}>
              <Button type="primary" htmlType="submit">
                Convert
              </Button>
            </Form.Item>
          </Form>
          <Divider plain>Result</Divider>
          { data == null ? <></> : (
          <div>
            <Badge color="#f50" text={`Coordinate X : ${data?.x}`} />
            <br />
            <Badge color="#2db7f5" text={`Coordinate Y : ${data?.y}`} />
            <br />
            <Badge color="#87d068" text={`Reactangle Height : ${data?.rectangle_height}`} />
            <br />
            <Badge color="#108ee9" text={`Reactangle Width : ${data?.rectangle_width}`} />
          </div>
          )}
          
        </>
      </main>
    </div>
  )
}

export default NanoConverter